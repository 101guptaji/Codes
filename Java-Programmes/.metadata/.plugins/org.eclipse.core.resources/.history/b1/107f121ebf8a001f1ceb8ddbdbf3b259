/*
 * Find the nth node from the end & remove it.
	Time complexity - O(n)
	Space complexity - O(1)

 */
package javaDSA;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

import javaDSA.ReverseLinkedList.Node;

public class FindAndRemoveNthNodeFromEndLL {
	
	static void printList(Node head) {
		Node temp = head;
		while(temp!=null) {
			System.out.print(temp.data+" ");
			temp = temp.next;
		}
		System.out.println();
	}
	
	static Node removeNthNodeEnd(Node head, int n) {
		if(head.next == null) {
			return null;
		}
		
		Node curr=head;
		int len = 0;
		while(curr!=null) {
			curr = curr.next;
			len++;
		}
		
		if(n == len) {
			return head.next;
		}
		
		int del = len-n;
		curr = head;
		while(--del>0) {
			curr = curr.next;
		}
		
		if(curr.next != null) {
			curr.next = curr.next.next;
		}
				
		return head;
	}

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		String[] list = br.readLine().split(" ");
		
		Node head = new Node(Integer.parseInt(list[0]));
		Node tail = head;
		for(int i=1;i<list.length;i++) {
			tail.next = new Node(Integer.parseInt(list[i]));
			tail = tail.next;
		}
		int n = Integer.parseInt(br.readLine());
		
		printList(head);
		
		Node newHead = removeNthNodeEnd(head, n);
		printList(newHead);

	}

}
