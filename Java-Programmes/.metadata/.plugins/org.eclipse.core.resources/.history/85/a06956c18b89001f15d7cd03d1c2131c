package dsaProblems;

public class SudokuSolver {
	static boolean isSafe(char[][] board, int row, int col, char x) {
		//same row and column
		for(int i=0;i<board.length;i++) {
			if(board[i][col] == x) {
				return false;
			}
			if(board[row][i] == x) {
				return false;
			}
		}
		
		int rowSrc = (row/3)*3;
		int colSrc = (col/3)*3;
		
		for(int i=rowSrc;i<rowSrc+3;i++) {
			for(int j=colSrc;j<colSrc+3;j++) {
				if(board[i][j] == x) {
					return false;
				}
			}
		}
		
		return true;
	}
	
	public static boolean solve(char[][] board, int row, int col) {
		if(row == board.length) {
			return true;
		}
		
		int nrow = 0, ncol = 0;
		
		if(col == board.length-1) {
			nrow = row+1;
			ncol = 0;
		}
		else {
			nrow = row;
			ncol = col+1;
		}
		
		if(board[row][col] != '.') {
			if(solve(board, nrow, ncol))
				return true;
		}
		else {
			//fill empty place
			for(int i=1;i<=9;i++) {
				if(isSafe(board, row, col, (char)(i+'0'))) {
					board[row][col] = (char)(i+'0');
					if(solve(board, nrow, ncol))
						return true;
					else
						board[row][col] = '.';
				}
			}
		}
		
		return false;
	}

	public static void main(String[] args) {
		char[][] board = {{'5','3','.','.','7','.','.','.','.'},
				{'6','.','.','1','9','5','.','.','.'},
				{'.','9','8','.','.','.','.','6','.'},
				{'8','.','.','.','6','.','.','.','3'},
				{'4','.','.','8','.','3','.','.','1'},
				{'7','.','.','.','2','.','.','.','6'},
				{'.','6','.','.','.','.','2','8','.'},
				{'.','.','.','4','1','9','.','.','5'},
				{'.','.','.','.','8','.','.','7','9'}};
		solve(board, 0,0);
		
		for(int i=0;i<board.length;i++) {
			for(int j=0;j<board.length;j++) {
				System.out.print(board[i][j]+" ");
			}
			System.out.println();
		}
	}

}
